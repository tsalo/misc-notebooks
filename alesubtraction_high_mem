Filename: /Users/tsalo/Documents/tsalo/NiMARE/nimare/meta/ale.py

Line #    Mem usage    Increment   Line Contents
================================================
   445    330.6 MiB    330.6 MiB       def _fit(self, meta1, meta2):
   446    330.6 MiB      0.0 MiB           assert np.array_equal(
   447    330.6 MiB      0.0 MiB               meta1.dataset.masker.mask_img.affine, meta2.dataset.masker.mask_img.affine
   448                                     )
   449    330.6 MiB      0.0 MiB           self.masker = meta1.dataset.masker
   450                             
   451    330.6 MiB      0.0 MiB           ma_maps1 = meta1.kernel_transformer.transform(
   452    309.9 MiB      0.0 MiB               meta1.inputs_["coordinates"], masker=self.masker, return_type="array"
   453                                     )
   454                             
   455    309.9 MiB      0.0 MiB           ma_maps2 = meta2.kernel_transformer.transform(
   456    346.6 MiB     36.7 MiB               meta2.inputs_["coordinates"], masker=self.masker, return_type="array"
   457                                     )
   458                             
   459    346.6 MiB      0.0 MiB           n_grp1 = ma_maps1.shape[0]
   460    419.8 MiB     73.2 MiB           ma_arr = np.vstack((ma_maps1, ma_maps2))
   461    419.8 MiB      0.0 MiB           id_idx = np.arange(ma_arr.shape[0])
   462    419.8 MiB      0.0 MiB           n_voxels = ma_arr.shape[1]
   463                             
   464                                     # Get ALE values for first group.
   465    419.8 MiB      0.0 MiB           grp1_ma_arr = ma_arr[:n_grp1, :]
   466    419.8 MiB      0.0 MiB           grp1_ale_values = np.ones(n_voxels)
   467    419.8 MiB      0.0 MiB           for i_exp in range(grp1_ma_arr.shape[0]):
   468    419.8 MiB      0.0 MiB               grp1_ale_values *= 1.0 - grp1_ma_arr[i_exp, :]
   469    419.8 MiB      0.0 MiB           grp1_ale_values = 1 - grp1_ale_values
   470                             
   471                                     # Get ALE values for second group.
   472    419.8 MiB      0.0 MiB           grp2_ma_arr = ma_arr[n_grp1:, :]
   473    419.8 MiB      0.0 MiB           grp2_ale_values = np.ones(n_voxels)
   474    419.8 MiB      0.0 MiB           for i_exp in range(grp2_ma_arr.shape[0]):
   475    419.8 MiB      0.0 MiB               grp2_ale_values *= 1.0 - grp2_ma_arr[i_exp, :]
   476    419.8 MiB      0.0 MiB           grp2_ale_values = 1 - grp2_ale_values
   477                             
   478    419.8 MiB      0.0 MiB           p_arr = np.ones(n_voxels)
   479                             
   480    419.8 MiB      0.0 MiB           diff_ale_values = grp1_ale_values - grp2_ale_values
   481                             
   482    419.8 MiB      0.0 MiB           if self.low_memory:
   483                                         from tempfile import mkdtemp
   484                                         filename = os.path.join(mkdtemp(), 'iter_diff_values.dat')
   485                                         iter_diff_values = np.memmap(filename, dtype=ma_arr.dtype, mode='w+',
   486                                                                      shape=(self.n_iters, n_voxels))
   487                                     else:
   488    419.8 MiB      0.0 MiB               iter_diff_values = np.zeros((self.n_iters, n_voxels), dtype=ma_arr.dtype)
   489                             
   490   2166.3 MiB      0.0 MiB           for i_iter in range(self.n_iters):
   491   2164.5 MiB      0.0 MiB               np.random.shuffle(id_idx)
   492   2164.5 MiB      0.0 MiB               iter_grp1_ale_values = np.ones(n_voxels, dtype=ma_arr.dtype)
   493   2164.5 MiB      0.0 MiB               for j_exp in id_idx[:n_grp1]:
   494   2164.5 MiB      1.7 MiB                   iter_grp1_ale_values *= 1.0 - ma_arr[j_exp, :]
   495   2164.5 MiB      0.0 MiB               iter_grp1_ale_values = 1 - iter_grp1_ale_values
   496                             
   497   2164.5 MiB      0.0 MiB               iter_grp2_ale_values = np.ones(n_voxels, dtype=ma_arr.dtype)
   498   2164.5 MiB      0.0 MiB               for j_exp in id_idx[n_grp1:]:
   499   2164.5 MiB      1.7 MiB                   iter_grp2_ale_values *= 1.0 - ma_arr[j_exp, :]
   500   2164.5 MiB      0.0 MiB               iter_grp2_ale_values = 1 - iter_grp2_ale_values
   501                             
   502   2166.3 MiB      1.7 MiB               iter_diff_values[i_iter, :] = iter_grp1_ale_values - iter_grp2_ale_values
   503   2166.3 MiB      0.0 MiB               del iter_grp1_ale_values, iter_grp2_ale_values
   504                             
   505   2166.3 MiB      0.0 MiB           if self.low_memory:
   506                                         iter_diff_values.flush()
   507                                         del iter_diff_values
   508                                         iter_diff_values = np.memmap(filename, dtype=ma_arr.dtype, mode='r',
   509                                                                      shape=(self.n_iters, n_voxels))
   510                             
   511   2166.3 MiB      0.0 MiB           for voxel in range(n_voxels):
   512   2166.3 MiB      0.0 MiB               p_arr[voxel] = null_to_p(
   513   2166.3 MiB      0.0 MiB                   diff_ale_values[voxel], iter_diff_values[:, voxel], tail="two"
   514                                         )
   515   1902.7 MiB      0.0 MiB           diff_signs = np.sign(diff_ale_values - np.median(iter_diff_values, axis=0))
   516                             
   517   1902.7 MiB      0.0 MiB           if self.low_memory:
   518                                         del iter_diff_values
   519                                         os.remove(filename)
   520                             
   521   1904.4 MiB      1.7 MiB           z_arr = p_to_z(p_arr, tail="two") * diff_signs
   522                             
   523   1904.4 MiB      0.0 MiB           images = {"z_desc-group1MinusGroup2": z_arr}
   524   1904.4 MiB      0.0 MiB           return images
Filename: /Users/tsalo/Documents/tsalo/NiMARE/nimare/meta/ale.py

Line #    Mem usage    Increment   Line Contents
================================================
   450    330.5 MiB    330.5 MiB       def _fit(self, meta1, meta2):
   451    330.5 MiB      0.0 MiB           assert np.array_equal(
   452    330.5 MiB      0.0 MiB               meta1.dataset.masker.mask_img.affine, meta2.dataset.masker.mask_img.affine
   453                                     )
   454    330.5 MiB      0.0 MiB           self.masker = meta1.dataset.masker
   455                             
   456    330.5 MiB      0.0 MiB           ma_maps1 = meta1.kernel_transformer.transform(
   457    309.8 MiB      0.0 MiB               meta1.inputs_["coordinates"], masker=self.masker, return_type="array"
   458                                     )
   459                             
   460    309.8 MiB      0.0 MiB           ma_maps2 = meta2.kernel_transformer.transform(
   461    346.5 MiB     36.7 MiB               meta2.inputs_["coordinates"], masker=self.masker, return_type="array"
   462                                     )
   463                             
   464    346.5 MiB      0.0 MiB           n_grp1 = ma_maps1.shape[0]
   465    419.7 MiB     73.2 MiB           ma_arr = np.vstack((ma_maps1, ma_maps2))
   466                             
   467    419.7 MiB      0.0 MiB           id_idx = np.arange(ma_arr.shape[0])
   468                             
   469                                     # Get MA values for both samples.
   470    419.7 MiB      0.0 MiB           n_voxels = ma_arr.shape[1]
   471                             
   472                                     # Get ALE values for first group.
   473    419.7 MiB      0.0 MiB           grp1_ma_arr = ma_arr[:n_grp1, :]
   474    419.7 MiB      0.0 MiB           grp1_ale_values = np.ones(n_voxels)
   475    419.7 MiB      0.0 MiB           for i_exp in range(grp1_ma_arr.shape[0]):
   476    419.7 MiB      0.0 MiB               grp1_ale_values *= 1.0 - grp1_ma_arr[i_exp, :]
   477    419.7 MiB      0.0 MiB           grp1_ale_values = 1 - grp1_ale_values
   478                             
   479                                     # Get ALE values for second group.
   480    419.7 MiB      0.0 MiB           grp2_ma_arr = ma_arr[n_grp1:, :]
   481    419.7 MiB      0.0 MiB           grp2_ale_values = np.ones(n_voxels)
   482    419.7 MiB      0.0 MiB           for i_exp in range(grp2_ma_arr.shape[0]):
   483    419.7 MiB      0.0 MiB               grp2_ale_values *= 1.0 - grp2_ma_arr[i_exp, :]
   484    419.7 MiB      0.0 MiB           grp2_ale_values = 1 - grp2_ale_values
   485                             
   486    419.7 MiB      0.0 MiB           p_arr = np.ones(n_voxels)
   487                             
   488    419.7 MiB      0.0 MiB           diff_ale_values = grp1_ale_values - grp2_ale_values
   489                             
   490    419.7 MiB      0.0 MiB           iter_diff_values = np.zeros((self.n_iters, n_voxels))
   491                             
   492    597.6 MiB      0.0 MiB           for i_iter in range(self.n_iters):
   493    595.8 MiB      0.0 MiB               np.random.shuffle(id_idx)
   494    595.8 MiB      0.0 MiB               iter_grp1_ale_values = np.ones(n_voxels)
   495    595.8 MiB      0.0 MiB               for j_exp in id_idx[:n_grp1]:
   496    595.8 MiB      1.7 MiB                   iter_grp1_ale_values *= 1.0 - ma_arr[j_exp, :]
   497    595.8 MiB      0.0 MiB               iter_grp1_ale_values = 1 - iter_grp1_ale_values
   498                             
   499    595.8 MiB      0.0 MiB               iter_grp2_ale_values = np.ones(n_voxels)
   500    595.8 MiB      0.0 MiB               for j_exp in id_idx[n_grp1:]:
   501    595.8 MiB      1.7 MiB                   iter_grp2_ale_values *= 1.0 - ma_arr[j_exp, :]
   502    595.8 MiB      0.0 MiB               iter_grp2_ale_values = 1 - iter_grp2_ale_values
   503                             
   504    597.6 MiB      1.7 MiB               iter_diff_values[i_iter, :] = iter_grp1_ale_values - iter_grp2_ale_values
   505                             
   506    597.6 MiB      0.0 MiB           for voxel in range(n_voxels):
   507    597.6 MiB      0.0 MiB               p_arr[voxel] = null_to_p(
   508    597.6 MiB      0.0 MiB                   diff_ale_values[voxel], iter_diff_values[:, voxel], tail="two"
   509                                         )
   510    599.3 MiB      1.8 MiB           diff_signs = np.sign(diff_ale_values - np.median(iter_diff_values, axis=0))
   511    602.8 MiB      3.5 MiB           z_arr = p_to_z(p_arr, tail="two") * diff_signs
   512                             
   513    602.8 MiB      0.0 MiB           images = {"z_desc-group1MinusGroup2": z_arr}
   514    602.8 MiB      0.0 MiB           return images
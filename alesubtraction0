Filename: /Users/tsalo/Documents/tsalo/NiMARE/nimare/meta/ale.py

Line #    Mem usage    Increment   Line Contents
================================================
   450    355.9 MiB    355.9 MiB       def _fit(self, meta1, meta2):
   451    355.9 MiB      0.0 MiB           assert np.array_equal(
   452    355.9 MiB      0.0 MiB               meta1.dataset.masker.mask_img.affine, meta2.dataset.masker.mask_img.affine
   453                                     )
   454    355.9 MiB      0.0 MiB           self.masker = meta1.dataset.masker
   455                             
   456    355.9 MiB      0.0 MiB           ma_maps1 = meta1.kernel_transformer.transform(
   457    410.8 MiB     54.9 MiB               meta1.inputs_["coordinates"], masker=self.masker, return_type="image"
   458                                     )
   459                             
   460    410.8 MiB      0.0 MiB           ma_maps2 = meta2.kernel_transformer.transform(
   461    555.5 MiB    144.6 MiB               meta2.inputs_["coordinates"], masker=self.masker, return_type="image"
   462                                     )
   463                             
   464    555.5 MiB      0.0 MiB           n_grp1 = len(ma_maps1)
   465    555.5 MiB      0.0 MiB           ma_maps = ma_maps1 + ma_maps2
   466                             
   467    555.5 MiB      0.0 MiB           id_idx = np.arange(len(ma_maps))
   468                             
   469                                     # Get MA values for both samples.
   470    853.1 MiB    297.6 MiB           ma_arr = self.masker.transform(ma_maps)
   471    853.1 MiB      0.0 MiB           n_voxels = ma_arr.shape[1]
   472                             
   473                                     # Get ALE values for first group.
   474    853.1 MiB      0.0 MiB           grp1_ma_arr = ma_arr[:n_grp1, :]
   475    853.1 MiB      0.0 MiB           grp1_ale_values = np.ones(n_voxels)
   476    853.1 MiB      0.0 MiB           for i_exp in range(grp1_ma_arr.shape[0]):
   477    853.1 MiB      0.0 MiB               grp1_ale_values *= 1.0 - grp1_ma_arr[i_exp, :]
   478    853.1 MiB      0.0 MiB           grp1_ale_values = 1 - grp1_ale_values
   479                             
   480                                     # Get ALE values for second group.
   481    853.1 MiB      0.0 MiB           grp2_ma_arr = ma_arr[n_grp1:, :]
   482    853.1 MiB      0.0 MiB           grp2_ale_values = np.ones(n_voxels)
   483    853.1 MiB      0.0 MiB           for i_exp in range(grp2_ma_arr.shape[0]):
   484    853.1 MiB      0.0 MiB               grp2_ale_values *= 1.0 - grp2_ma_arr[i_exp, :]
   485    853.1 MiB      0.0 MiB           grp2_ale_values = 1 - grp2_ale_values
   486                             
   487    853.1 MiB      0.0 MiB           p_arr = np.ones(n_voxels)
   488                             
   489    854.8 MiB      1.7 MiB           diff_ale_values = grp1_ale_values - grp2_ale_values
   490                             
   491    854.8 MiB      0.0 MiB           iter_diff_values = np.zeros((self.n_iters, n_voxels))
   492                             
   493   1034.3 MiB      0.0 MiB           for i_iter in range(self.n_iters):
   494   1032.6 MiB      0.0 MiB               np.random.shuffle(id_idx)
   495   1032.6 MiB      1.7 MiB               iter_grp1_ale_values = np.ones(n_voxels)
   496   1032.6 MiB      0.0 MiB               for j_exp in id_idx[:n_grp1]:
   497   1032.6 MiB      1.7 MiB                   iter_grp1_ale_values *= 1.0 - ma_arr[j_exp, :]
   498   1032.6 MiB      0.0 MiB               iter_grp1_ale_values = 1 - iter_grp1_ale_values
   499                             
   500   1032.6 MiB      0.0 MiB               iter_grp2_ale_values = np.ones(n_voxels)
   501   1032.6 MiB      0.0 MiB               for j_exp in id_idx[n_grp1:]:
   502   1032.6 MiB      1.7 MiB                   iter_grp2_ale_values *= 1.0 - ma_arr[j_exp, :]
   503   1032.6 MiB      0.0 MiB               iter_grp2_ale_values = 1 - iter_grp2_ale_values
   504                             
   505   1034.3 MiB      1.7 MiB               iter_diff_values[i_iter, :] = iter_grp1_ale_values - iter_grp2_ale_values
   506                             
   507   1034.3 MiB      0.0 MiB           for voxel in range(n_voxels):
   508   1034.3 MiB      0.0 MiB               p_arr[voxel] = null_to_p(
   509   1034.3 MiB      0.0 MiB                   diff_ale_values[voxel], iter_diff_values[:, voxel], tail="two"
   510                                         )
   511   1036.1 MiB      1.7 MiB           diff_signs = np.sign(diff_ale_values - np.median(iter_diff_values, axis=0))
   512   1039.6 MiB      3.5 MiB           z_arr = p_to_z(p_arr, tail="two") * diff_signs
   513                             
   514   1039.6 MiB      0.0 MiB           images = {"z_desc-group1MinusGroup2": z_arr}
   515   1039.6 MiB      0.0 MiB           return images
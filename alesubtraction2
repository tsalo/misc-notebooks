Filename: /Users/tsalo/Documents/tsalo/NiMARE/nimare/meta/ale.py

Line #    Mem usage    Increment   Line Contents
================================================
   450    330.5 MiB    330.5 MiB       def _fit(self, meta1, meta2):
   451    330.5 MiB      0.0 MiB           assert np.array_equal(
   452    330.5 MiB      0.0 MiB               meta1.dataset.masker.mask_img.affine, meta2.dataset.masker.mask_img.affine
   453                                     )
   454    330.5 MiB      0.0 MiB           self.masker = meta1.dataset.masker
   455                             
   456    330.5 MiB      0.0 MiB           ma_maps1 = meta1.kernel_transformer.transform(
   457    309.9 MiB      0.0 MiB               meta1.inputs_["coordinates"], masker=self.masker, return_type="array"
   458                                     )
   459                             
   460    309.9 MiB      0.0 MiB           ma_maps2 = meta2.kernel_transformer.transform(
   461    346.5 MiB     36.7 MiB               meta2.inputs_["coordinates"], masker=self.masker, return_type="array"
   462                                     )
   463                             
   464    346.5 MiB      0.0 MiB           n_grp1 = ma_maps1.shape[0]
   465    419.7 MiB     73.2 MiB           ma_arr = np.vstack((ma_maps1, ma_maps2))
   466    419.7 MiB      0.0 MiB           id_idx = np.arange(ma_arr.shape[0])
   467    419.7 MiB      0.0 MiB           n_voxels = ma_arr.shape[1]
   468                             
   469                                     # Get ALE values for first group.
   470    419.7 MiB      0.0 MiB           grp1_ma_arr = ma_arr[:n_grp1, :]
   471    419.7 MiB      0.0 MiB           grp1_ale_values = np.ones(n_voxels)
   472    419.7 MiB      0.0 MiB           for i_exp in range(grp1_ma_arr.shape[0]):
   473    419.7 MiB      0.0 MiB               grp1_ale_values *= 1.0 - grp1_ma_arr[i_exp, :]
   474    419.7 MiB      0.0 MiB           grp1_ale_values = 1 - grp1_ale_values
   475                             
   476                                     # Get ALE values for second group.
   477    419.7 MiB      0.0 MiB           grp2_ma_arr = ma_arr[n_grp1:, :]
   478    419.7 MiB      0.0 MiB           grp2_ale_values = np.ones(n_voxels)
   479    419.7 MiB      0.0 MiB           for i_exp in range(grp2_ma_arr.shape[0]):
   480    419.7 MiB      0.0 MiB               grp2_ale_values *= 1.0 - grp2_ma_arr[i_exp, :]
   481    419.7 MiB      0.0 MiB           grp2_ale_values = 1 - grp2_ale_values
   482                             
   483    419.7 MiB      0.0 MiB           p_arr = np.ones(n_voxels)
   484                             
   485    419.7 MiB      0.0 MiB           diff_ale_values = grp1_ale_values - grp2_ale_values
   486                             
   487    419.7 MiB      0.0 MiB           iter_diff_values = np.zeros((self.n_iters, n_voxels))
   488                             
   489   2166.2 MiB      0.0 MiB           for i_iter in range(self.n_iters):
   490   2164.5 MiB      0.0 MiB               np.random.shuffle(id_idx)
   491   2164.5 MiB      0.0 MiB               iter_grp1_ale_values = np.ones(n_voxels)
   492   2164.5 MiB      0.0 MiB               for j_exp in id_idx[:n_grp1]:
   493   2164.5 MiB      1.7 MiB                   iter_grp1_ale_values *= 1.0 - ma_arr[j_exp, :]
   494   2164.5 MiB      0.0 MiB               iter_grp1_ale_values = 1 - iter_grp1_ale_values
   495                             
   496   2164.5 MiB      0.0 MiB               iter_grp2_ale_values = np.ones(n_voxels)
   497   2164.5 MiB      0.0 MiB               for j_exp in id_idx[n_grp1:]:
   498   2164.5 MiB      1.7 MiB                   iter_grp2_ale_values *= 1.0 - ma_arr[j_exp, :]
   499   2164.5 MiB      0.0 MiB               iter_grp2_ale_values = 1 - iter_grp2_ale_values
   500                             
   501   2166.2 MiB      1.7 MiB               iter_diff_values[i_iter, :] = iter_grp1_ale_values - iter_grp2_ale_values
   502                             
   503   2166.2 MiB      0.0 MiB           for voxel in range(n_voxels):
   504   2166.2 MiB      0.0 MiB               p_arr[voxel] = null_to_p(
   505   2166.2 MiB      0.0 MiB                   diff_ale_values[voxel], iter_diff_values[:, voxel], tail="two"
   506                                         )
   507   1687.3 MiB      0.0 MiB           diff_signs = np.sign(diff_ale_values - np.median(iter_diff_values, axis=0))
   508   1690.9 MiB      3.6 MiB           z_arr = p_to_z(p_arr, tail="two") * diff_signs
   509                             
   510   1690.9 MiB      0.0 MiB           images = {"z_desc-group1MinusGroup2": z_arr}
   511   1690.9 MiB      0.0 MiB           return images